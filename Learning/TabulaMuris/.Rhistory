here()
install.packages("here")
library(herer)
library(here)
here()
q()
# Chunk 1: setup
require("Matrix")
library(here)
library(DropletUtils)
library(scater)
library(scran)
library(SC3)
library(EnsDb.Mmusculus.v79)
#setwd("/Volumes/SlowDrive/NGSdata/tenX_genomics/tabulaMuris/")
sce <- readRDS(here("data", "tabula", "tabularMuris_withMarkers.rds"))
sce
knitr::opts_chunk$set(fig.path = "../plots/")
# Chunk 2
par(mfrow=c(1,2))
plotPCA(sce, ncomponents=2, colour_by="type")
plotUMAP(sce, colour_by="type")
plotTSNE(sce, colour_by="type")
# Chunk 3
sce <- sc3_estimate_k(sce)
metadata(sce)$sc3$k_estimation
# Chunk 4
# Got to write the gene names to a different slot
rowData(sce)$feature_symbol = row.names(sce)
sce <- sc3(sce, ks = 24, biology = TRUE, rand_seed = 10)
# Chunk 5
sc3_plot_consensus(sce, k = 24, show_pdata = "type")
require("Matrix")
library(here)
library(DropletUtils)
library(scater)
library(scran)
library(SC3)
library(EnsDb.Mmusculus.v79)
#setwd("/Volumes/SlowDrive/NGSdata/tenX_genomics/tabulaMuris/")
sce <- readRDS(here("data", "tabularMuris_withMarkers.rds"))
sce
knitr::opts_chunk$set(fig.path = "../plots/")
par(mfrow=c(1,2))
plotPCA(sce, ncomponents=2, colour_by="type")
plotUMAP(sce, colour_by="type")
plotTSNE(sce, colour_by="type")
sce <- sc3_estimate_k(sce)
metadata(sce)$sc3$k_estimation
sc3_plot_consensus(sce, k = 24, show_pdata = "type")
BiocManager::install("M3Drop", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("M3Drop", version = "3.8"
)
library(M3Drop)
m3dGenes <- as.character(M3DropFeatureSelection(sce)$Gene)
sce
keep_feature <- rowSums(counts(sce) > 0) > 0
umi <- umi[keep_feature, ]
keep_feature <- rowSums(counts(sce) > 0) > 0
sce <- sce[keep_feature, ]
sce
BiocManager::install("monocle", version = "3.8")
library(monacle)
library(monocle)
HSMM_marrow <- setOrderingFilter(sce, row.names(sce))
#plot_ordering_genes(HSMM_myo)
mon = convertTo(x, type=c("monocle"))#,row.fields=NULL, col.fields=NULL,
#use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon = convertTo(sce, type=c("monocle"))#,row.fields=NULL, col.fields=NULL,
#use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
View(sce)
rowData(sce)
mon = convertTo(sce, type=c("monocle"),row.fields=row.names(sce), col.fields=colnames(sce),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
colnames(sce)
mon = convertTo(sce, type=c("monocle"),row.fields=row.names(sce), col.fields=colnames(sce),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
mon = convertTo(sce, type=c("monocle"),row.fields=row.names(sce), col.fields=colnames(sce),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
mon
mon = convertTo(sce, type="monocle",row.fields=row.names(sce), col.fields=colnames(sce),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
rowData(sce)
colData(sce)
View(sce)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6), col.fields=c(1,2,5),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
rowData(sce)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6), col.fields=c(1,2,5,row.names(sce)),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
#HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
#plot_ordering_genes(HSMM_marrow)
mon
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6), col.fields=c(1,2,5,row.names(sce)),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
HSMM_marrow
assayData(HSMM_marrow)
row.names(mon)
featureData(mon)
mon
mon
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6), col.fields=c(1,2,5,row.names(sce)),
use.all.sf=TRUE, subset.row=NULL, get.spikes=FALSE)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6), col.fields=c(1,2,5,row.names(sce)))
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6,row.names(sce)),
col.fields=c(1,2,5))
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon
row.names(mon)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6),
col.fields=c(1,2,5))
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
rowData(sce)$gene_short_name = row.names(sce)
rowData(sce)
length(rowData(sce))
rowData(sce)$gene_short_name = row.names(sce)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5))
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon
rowData(sce)$gene_short_name = row.names(sce)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5))
mon <- estimateSizeFactors(mon)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
#rowData(sce)$gene_short_name = row.names(sce)
#mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5))
mon <- estimateDispersions(mon)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon <- reduceDimension(mon, pseudo_expr = 1)
row.names(top.dec(sce))
rowData(sce)
mon = importCDS(sce)
mon = convertTo(sce, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5), expressionFamily=negbinomial.size())
fit <- trendVar(sce, use.spikes=FALSE, loess.args=list(span=0.05))
fit0 <- fit
fit$trend <- new.trend
dec <- decomposeVar(fit=fit)
top.dec <- dec[order(dec$bio, decreasing=TRUE),]
head(top.dec)
new.trend <- makeTechTrend(x=sce)
fit <- trendVar(sce, use.spikes=FALSE, loess.args=list(span=0.05))
fit0 <- fit
fit$trend <- new.trend
dec <- decomposeVar(fit=fit)
top.dec <- dec[order(dec$bio, decreasing=TRUE),]
head(top.dec)
sceSmall = sceSmall[top.dec,]
rowData(sce)$gene_short_name = row.names(sce)
sceSmall = sce
sceSmall = sceSmall[top.dec,]
top.dec
sceSmall = sceSmall[row.names(top.dec),]
sce
sceSmall
sceSmall = sceSmall[row.names(top.dec[1:500]),]
sceSmall = sceSmall[row.names(top.dec)[1:500],]
rowData(sce)$gene_short_name = row.names(sce)
sceSmall = sce
new.trend <- makeTechTrend(x=sce)
fit <- trendVar(sce, use.spikes=FALSE, loess.args=list(span=0.05))
fit0 <- fit
fit$trend <- new.trend
dec <- decomposeVar(fit=fit)
top.dec <- dec[order(dec$bio, decreasing=TRUE),]
sceSmall = sceSmall[row.names(top.dec)[1:200],]
sceSmall
mon = convertTo(sceSmall, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5), expressionFamily=negbinomial.size())
mon <- estimateDispersions(mon)
HSMM_marrow <- estimateSizeFactors(HSMM)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon <- reduceDimension(mon, pseudo_expr = 1)
mon <- orderCells(mon, reverse = FALSE)
plot_cell_trajectory(mon)
HSMM_marrow <- estimateSizeFactors(mon)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
mon <- reduceDimension(mon, pseudo_expr = 1)
mon <- orderCells(mon, reverse = FALSE)
plot_cell_trajectory(mon)
mon
varLabels(mon)
plot_cell_trajectory(mon, color_by = "type")
par(mfrow=c(1,2))
plot_cell_trajectory(mon, color_by = "type")
plot_cell_trajectory(mon, color_by = "State")
par(mfrow=c(1,2))
plot_cell_trajectory(mon, color_by = "type")
plot_cell_trajectory(mon, color_by = "mouse")
plot_cell_trajectory(mon, color_by = "type") +
facet_wrap(~State, nrow = 1)
plot_cell_trajectory(mon, color_by = "type") +
facet_wrap(~type, nrow = 1)
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("CD8", "CD11", "CD4", "CD45")))
cds_subset <- mon[to_be_tested,]
cds_subset
row.names(mon)
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("Ftl1", "Vim", "Cd24a", "CD45")))
cds_subset <- mon[to_be_tested,]
cds_subset
subset(fData(mon)
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("Ftl1", "Vim", "Cd24a", "CD45")))
cds_subset <- mon[to_be_tested,]
diff_test_res <- differentialGeneTest(cds_subset,
fullModelFormulaStr = "~sm.ns(Pseudotime)")
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("Ftl1", "Vim", "Cd24a", "CD45")))
cds_subset <- mon[to_be_tested,]
diff_test_res <- differentialGeneTest(cds_subset,
fullModelFormulaStr = "~sm.ns(Pseudotime)")
diff_test_res[,c("gene_short_name", "pval", "qval")]
plot_genes_in_pseudotime(cds_subset, color_by = "Hours")
plot_genes_in_pseudotime(cds_subset, color_by = "type")
q()
update.packages()
BiocManager::install()
q()
install.packages()
update.packages()
BiocManager::install()
require("Matrix")
library(here)
library(DropletUtils)
library(scater)
library(scran)
library(SC3)
library(monacle)
library(EnsDb.Mmusculus.v79)
#setwd("/Volumes/SlowDrive/NGSdata/tenX_genomics/tabulaMuris/")
sce <- readRDS(here("data", "tabularMuris_withMarkers.rds"))
sce
knitr::opts_chunk$set(fig.path = "../plots/")
BiocManager::install("monocle", version = "3.8")
# Chunk 1: setup
require("Matrix")
library(here)
library(DropletUtils)
library(scater)
library(scran)
library(SC3)
library(monocle)
library(EnsDb.Mmusculus.v79)
#setwd("/Volumes/SlowDrive/NGSdata/tenX_genomics/tabulaMuris/")
sce <- readRDS(here("data", "tabularMuris_withMarkers.rds"))
sce
knitr::opts_chunk$set(fig.path = "../plots/")
# Chunk 2
par(mfrow=c(1,2))
plotPCA(sce, ncomponents=2, colour_by="type")
plotUMAP(sce, colour_by="type")
plotTSNE(sce, colour_by="type")
# Chunk 3
sce <- sc3_estimate_k(sce)
metadata(sce)$sc3$k_estimation
# Chunk 4
# Got to write the gene names to a different slot
rowData(sce)$feature_symbol = row.names(sce)
sce <- sc3(sce, ks = 24, biology = TRUE, rand_seed = 10)
# Chunk 5
sc3_plot_consensus(sce, k = 24, show_pdata = "type")
# Chunk 6
keep_feature <- rowSums(counts(sce) > 0) > 0
sce <- sce[keep_feature, ]
# Chunk 7
# Attach the gene names to a slot in row data otherwise monacle datastructure complains
rowData(sce)$gene_short_name = row.names(sce)
sceSmall = sce
# Get the highly variable genes
new.trend <- makeTechTrend(x=sce)
fit <- trendVar(sce, use.spikes=FALSE, loess.args=list(span=0.05))
fit0 <- fit
fit$trend <- new.trend
dec <- decomposeVar(fit=fit)
top.dec <- dec[order(dec$bio, decreasing=TRUE),]
# subset the data for top 200 variable genes
sceSmall = sceSmall[row.names(top.dec)[1:200],]
sceSmall
# Convert to monacle datastructure
mon = convertTo(sceSmall, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5), expressionFamily=negbinomial.size())
mon <- estimateDispersions(mon)
HSMM_marrow <- estimateSizeFactors(mon)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
# Chunk 8
mon <- reduceDimension(mon, pseudo_expr = 1)
mon <- orderCells(mon, reverse = FALSE)
par(mfrow=c(1,2))
plot_cell_trajectory(mon, color_by = "type")
plot_cell_trajectory(mon, color_by = "type") +
facet_wrap(~type, nrow = 1)
# Chunk 9
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("Ftl1", "Vim", "Cd24a", "CD45")))
cds_subset <- mon[to_be_tested,]
diff_test_res <- differentialGeneTest(cds_subset,
fullModelFormulaStr = "~sm.ns(Pseudotime)")
diff_test_res[,c("gene_short_name", "pval", "qval")]
plot_genes_in_pseudotime(cds_subset, color_by = "type")
saveRDS(mon, "monacleObject.rds")
saveRDS(sce, "afterSCE.rds")
q()
# Chunk 1: setup
require("Matrix")
library(here)
library(DropletUtils)
library(scater)
library(scran)
library(SC3)
library(monocle)
library(EnsDb.Mmusculus.v79)
#setwd("/Volumes/SlowDrive/NGSdata/tenX_genomics/tabulaMuris/")
sce <- readRDS(here("data", "tabularMuris_withMarkers.rds"))
sce
knitr::opts_chunk$set(fig.path = "../plots/")
# Chunk 2
par(mfrow=c(1,2))
plotPCA(sce, ncomponents=2, colour_by="type")
plotUMAP(sce, colour_by="type")
plotTSNE(sce, colour_by="type")
# Chunk 3
#sce <- sc3_estimate_k(sce)
#metadata(sce)$sc3$k_estimation
# Chunk 4
# Got to write the gene names to a different slot
rowData(sce)$feature_symbol = row.names(sce)
sce <- sc3(sce, ks = 24, biology = TRUE, rand_seed = 10)
# Chunk 5
sc3_plot_consensus(sce, k = 24, show_pdata = "type")
# Chunk 6
keep_feature <- rowSums(counts(sce) > 0) > 0
sce <- sce[keep_feature, ]
# Chunk 7
# Attach the gene names to a slot in row data otherwise monacle datastructure complains
rowData(sce)$gene_short_name = row.names(sce)
sceSmall = sce
# Get the highly variable genes
new.trend <- makeTechTrend(x=sce)
fit <- trendVar(sce, use.spikes=FALSE, loess.args=list(span=0.05))
fit0 <- fit
fit$trend <- new.trend
dec <- decomposeVar(fit=fit)
top.dec <- dec[order(dec$bio, decreasing=TRUE),]
# subset the data for top 200 variable genes
sceSmall = sceSmall[row.names(top.dec)[1:200],]
sceSmall
# Convert to monacle datastructure
mon = convertTo(sceSmall, type="monocle",row.fields=c(1,4,5,6,11),
col.fields=c(1,2,5), expressionFamily=negbinomial.size())
mon <- estimateDispersions(mon)
HSMM_marrow <- estimateSizeFactors(mon)
HSMM_marrow <- setOrderingFilter(mon, row.names(sce))
plot_ordering_genes(HSMM_marrow)
# Chunk 8
mon <- reduceDimension(mon, pseudo_expr = 1)
mon <- orderCells(mon, reverse = FALSE)
par(mfrow=c(1,2))
plot_cell_trajectory(mon, color_by = "type")
plot_cell_trajectory(mon, color_by = "type") +
facet_wrap(~type, nrow = 1)
# Chunk 9
to_be_tested <- row.names(subset(fData(mon),
gene_short_name %in% c("Ftl1", "Vim", "Cd24a", "CD45")))
cds_subset <- mon[to_be_tested,]
diff_test_res <- differentialGeneTest(cds_subset,
fullModelFormulaStr = "~sm.ns(Pseudotime)")
diff_test_res[,c("gene_short_name", "pval", "qval")]
plot_genes_in_pseudotime(cds_subset, color_by = "type")
gene_short_name
